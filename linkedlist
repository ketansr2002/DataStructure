//creation of a linked list , insertion and delection of node at various positions
#include<bits/stdc++.h>
using namespace std;

//declaring a class node which is individual node of a linked list
//constructor is also made to intialise the node , destructor is optional
    class node{
        public:
        int val;
        node* next;

        node(int data){
            val=data;
            next=NULL;
        }

    };

    void insertAtTail(node* &head,int val){

        //instance of a node is created which is later connnected to the link list
        node* n=new node(val);
        if(head==NULL){
            head=n;
            return;
        }
        node* temp=head;
        while(temp->next !=NULL){
            temp=temp->next;
        }
        temp->next=n;
    }

    void insertAtHead(node* &head,int val){
        node* n=new node(val);
        n->next=head;
        head=n;
    }

    void insertInBetween(node* &head,int idx,int val){
        node* n=new node(val);
        node* temp=head;

        while(idx--){
            temp=temp->next;
        }
        n->next=temp->next;
        temp->next=n;
    }

    void deleteFromHead(node* &head){
        node* temp=head;
        head=head->next;
        temp->next=NULL;

        delete temp;
    }

    void deleteFromTail(node* &head){
        node* temp=head;

        while(temp->next->next != NULL){
            temp=temp->next;
        }
        node* deletePtr=temp->next;
        temp->next=NULL;
        delete deletePtr;
    }

    void deleteFromBetween(node* &head,int idx){
        node* temp=head;
        node* deletePtr=NULL;
        //we will access the node previous to the node that needs to be deleted
        idx--;

        while(idx--){
            temp=temp->next;
        }

        deletePtr=temp->next;
        temp->next=deletePtr->next;
        delete deletePtr;


    }
    void print(node* head){
        while(head != NULL){
            cout<<head->val<<"->";
            head=head->next;
        }
    }


    int main(){
        node* head=NULL;
        insertAtTail(head,1);
        insertAtTail(head,2);
        insertAtTail(head,3);
        insertAtTail(head,4);
        insertAtTail(head,5);
        insertInBetween(head,2,6);

        print(head);
        deleteFromBetween(head,3);
        deleteFromHead(head);
        deleteFromTail(head);   

    }


**********************************************************************************************************************************************  


//various questions on linked list
//find middle element of linked list.

    int getMiddle(Node *head)
        {
            if(head == NULL){
                return -1;
            }
            Node* sp=head;
            Node* fp=head;

            int c=1;

            while(fp != NULL && fp->next !=NULL){
                sp=sp->next;
                fp=fp->next->next;
                c++;
            }

            return sp->data;
        }
    
**********************************************************************************************************************************************  
  
 //detect loop in a linked list. in this question we take fast and slow pointer and if they meet at some point then cycle is there.
        bool detectLoop(Node* head)
        {
            Node* sp=head;
            Node* fp=head->next;
            while(fp != NULL && fp->next != NULL){
                if(fp == sp){
                    return true;
                }
                fp=fp->next->next;
                sp=sp->next;
            }
            return false;
        }    
  -->we can use a visited map which stores whether a node has been visited or not and if loop existed in the list 
     then there must be a node whose next node is alread visted and we can say loop exist. -->
     
     
**********************************************************************************************************************************************     
     

//detect starting of a loop in a linked list. here we will use the 'Floyd loop detection algorithm'.
        Node* detectAndRemoveLoop(Node* head)
        {
        // If list is empty or has only one node
        // without loop
        if (head == NULL || head->next == NULL)
            return NULL;

        Node *slow = head, *fast = head;
        // Move slow and fast 1 and 2 steps
        // ahead respectively.
        slow = slow->next;
        fast = fast->next->next;
        // Search for loop using slow and
        // fast pointers
        while (fast && fast->next) {
            if (slow == fast)
                break;
            slow = slow->next;
            fast = fast->next->next;
        }
        // If loop does not exist
        if (slow != fast)
            return NULL;
        // If loop exists. Start slow from
        // head and fast from meeting point.
        slow = head;
        while (slow != fast) {
            slow = slow->next;
            fast = fast->next;
        }
        return slow;
    }
    
  -->this can also be done using the visted map -->
 
 **********************************************************************************************************************************************  
 
 
 //remove the loop in a linked list
        




















//remove duplicates in a sorted linked list

    void deleteNode(Node* &head,Node* &curr){
    Node* temp=curr->next;
    curr->next=temp->next;
    
    delete temp;
}

Node *removeDuplicates(Node *head)
{
    Node* curr=head;
    
    while(curr != NULL && curr->next != NULL){
        if(curr->data == (curr->next)->data){
            deleteNode(head,curr);
        }
        else{
        curr=curr->next;
        }
    }
    return head;
}


*********************************************************************************************************************************************  


// remove duplicates in a unsorted link list.

        void deleteNode(Node* &curr){
    Node* nxt=curr->next;
    curr->next=nxt->next;
}
Node *removeDuplicates(Node *head)
{
    Node* curr=head;
    Node* prev=head;
    while(curr != NULL && curr->next != NULL){
        Node* next=curr->next;
        prev =curr;
        while(next != NULL){
            if(curr->data == next->data){
                deleteNode(prev);
                next=prev->next;
            }
            else{
                next=next->next;
                prev=prev->next;
            }
        }
        curr=curr->next;
    }
    return head;
}

--> in this approach we hav done the solution in N*N time complexity be checking every node to every other nodes in link list
    and if found duplicate then delete the deplicate node -->
  
  
// here we will now use new method by taking a map of nodes and then we will check every node nd if a certain node is found in the map
    then it means that it is duplicate and we will delete this node
   
    Node *removeDuplicates(Node *head)
    {
        unordered_map<int,bool> mp;
        Node* temp=head;
        Node* prev;
    
        while(temp != NULL){
            if(mp[temp->data] == true){
                deleteNode(prev);
                temp=prev;
            }
            else{
                mp[temp->data]=true;
                prev=temp;
            }
            temp=temp->next;
        }
        return head;
    }
